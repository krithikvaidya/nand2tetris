// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

/**
 * LOGIC:
 * The addresses in the range 000... to 01111..... will be used to access the RAM16K
 * The addresses in the range 100... to 10111..... will be used to access the Screen
 * The address 1100000000000000 will be used to access the Keyboard
 * So if the MSB of the address is 0, then RAM will be accessed, else the Keyboard Or Screen will be accessed.
 */

    PARTS:
    // The next two lines determine whether to access the RAM or the I/O devices
    Mux(a=true, b=false, sel=address[14], out=loadram);
    Not(in=loadram, out=loadScrOrKBD);

    // The next two lines determine the load bits for the RAM and Screen based on the output of the above
    // two lines and the inputted load bit.
    And(a=loadram, b=load, out=finalload1);
    And(a=loadScrOrKBD, b=load, out=finalload2);

    // Logic of updating and/or getting the values of the contents in the Memory
    RAM16K(in=in, load=finalload1, address=address[0..13], out=ram);
    Screen(in=in, load=finalload2, address=address[0..12], out=screen);
    Keyboard(out=kbd);

    // Depending on the MSB and the bit after the MSB of the address input, we can determine which of the 
    // above three outputs should be the final output - 
    // if 00 or 01 - will be the RAM
    // 10 - Screen
    // 11 - KBD
    Mux4Way16(a=ram, b=ram, c=screen, d=kbd, sel[0]=address[13], sel[1]=address[14], out=out);
}