// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determines whether the ALU output of the instruction input
    // should enter the A Register.
    // Based on looking at the MSB of the instruction (if its 0, it means
    // that the instruction is an A instruction)
    Mux16(a=instruction, b=outM1, sel=instruction[15], out=ARegInput);
    
    // Negating the MSB
    Not(in=instruction[15], out=notinst15);

    // If the instruction is an A instruction OR 
    // if a C instruction changes the value of the A
    // register, then assert A Register's load bit.
    // The latter is done by looking at the 'd1' bit
    // of the C instruction. (instruction[5])
    Or(a=instruction[5], b=notinst15, out=loadForAReg);
    
    // Using the built-in A Register
    ARegister(in=ARegInput, load=loadForAReg, out=ARegOut, out[0..14]=addressM, out[0..14]=PCInput);

    // We now move to the D Register.
    // If the instruction is a C instruction AND
    // the C instruction changes the value in the
    // D Register (checked by looking at the d2
    // bit of the instruction, instruction[4]),
    // Then the load bit for D Register will be asserted.
    And(a=instruction[15], b=instruction[4], out=loadForDReg);

    // Built-in D Register
    DRegister(in=outM2, load=loadForDReg, out=a);
    
    // We move to the other input of the ALU, the Mux16
    // Making the 'a' bit of the instruction (instruction[12])
    // as the load bit for the Mux16, we select either the 
    // value in the A Register OR the value in the M register, inM
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=b);

    // We send the above inputs into the ALU, along with
    // the correct control bits
    ALU(x=a, y=b, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outM1, out=outM2, zr=zr, ng=ng);

    // To determine whether writeM will be 0 or 1, we need
    // to check that the instruction is a C instruction, AND that
    // the C instruction changes the value in the M Register (done
    // by looking at bit 'd3', instruction[3])
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Now we will deal with the Program Counter
    // We will determine whether the address emitted
    // by the PC is either pc++ or address is A register -
    // the value emitted by the PC is A, then a
    // when a jump statement has been encountered and the
    // jump condition is satisfied. Else pc++ emitted.

    // Inspect the three instruction bits and the
    // zr and ng outputs of the ALU. We can come up
    // with the expression 
    // (ng.j1) + (zr.j2) + ((zr)'(ng)'.j3)
    // as the required expression to determine whether
    // the jump condition is present and satisfied in the
    // instruction, or not.
    // Another condition to be checked if the jump will be
    // performed or not is if the instruction is a C instruction.
    And(a=zr, b=instruction[1], out=term1);
    And(a=ng, b=instruction[2], out=term2);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=temp2);
    And(a=temp2,b=instruction[0], out=term3);

    Or(a=term1, b=term2, out=T1);
    Or(a=T1, b=term3, out=performJump);

    // Checkign if the instruction is a C instruction also
    And(a=performJump, b=instruction[15], out=finalJump);
    Not(in=finalJump, out=notFinalJump);

    // Also if reset == 1, then all the above is overriden and
    // PC is set to 0.
    PC(in[0..14]=PCInput, in[15]=false, load=finalJump, inc=notFinalJump, reset=reset, out[0..14]=pc);
}   